# Given a set of points (x, y) on a 2D cartesian plane, find the two closest points. For example, given the points
# [(1, 1), (-1, -1), (3, 4), (6, 1), (-1, -6), (-4, -3)], return [(-1, -1), (1, 1)].

import math


class ClosestPair:

    # Look at the Divide and Conquer Algorithm.
    # https://www.dailycodingproblem.com/solution/340?token=26ad6f07b7571b9f6f7160a965e0b7ff178d75e7f79e37f05ff39bbda351516c5d334dc8

    # Approach 1 => O(n ^ 2)
    def closest_pair_brute_force(self, points):
        def distance(p1, p2):
            x1, y1 = p1
            x2, y2 = p2
            return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

        min_pair, min_dist = None, float('inf')
        for p1 in points:
            for p2 in points:
                if p1 is p2:
                    continue
                dist = distance(p1, p2)
                if dist < min_dist:
                    min_pair = (p1, p2)
                    min_dist = dist

        return min_pair


if __name__ == '__main__':
    cp = ClosestPair()
    result = cp.closest_pair_brute_force([(1, 1), (-1, -1)])
    print(result)
